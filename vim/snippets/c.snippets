## Main
# main
snippet main
	int 
	main(int argc, const char *argv[])
	{
		${0}
		return EXIT_SUCCESS;
	}
# main(void)
snippet mainn
	int 
	main(void)
	{
		${0}
		return EXIT_SUCCESS;
	}
##
## Preprocessor
# #include <...>
snippet inc
	#include <${1:stdio}.h>
# #include "..."
snippet Inc
	#include "${1:`vim_snippets#Filename("$1.h")`}"
# ifndef...define...endif
snippet ndef
	#ifndef $1
	#define ${1:SYMBOL} ${2:value}
	#endif
# define
snippet def
	#define
# ifdef...endif
snippet ifdef
	#ifdef ${1:FOO}
		${2:#define }
	#endif
# if
snippet #if
	#if ${1:FOO}
		${0}
	#endif
# header include guard
snippet once
	#ifndef ${1:`toupper(vim_snippets#Filename('$1_H', 'UNTITLED_H'))`}

	#define $1

	${0}

	#endif /* end of include guard: $1 */
##
## Control Statements
# if
snippet if
	if (${1:true}) {
		${0}
	}
snippet ife
	if (${1:true}) {
		${2}
	} else {
		${0}
	}
# else
snippet el
	else {
		${0}
	}
# else if
snippet elif
	else if (${1:true}) {
		${0}
	}
# ifi
snippet ifi
	if (${1:true}) ${0};
# ternary
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# switch
snippet switch
	switch (${1:/* variable */}) {
		case ${2:/* variable case */}:
			${3}
			${4:break;}${5}
		default:
			${6}
	}
# switch without default
snippet switchndef
	switch (${1:/* variable */}) {
		case ${2:/* variable case */}:
			${3}
			${4:break;}${5}
	}
# case
snippet case
	case ${1:/* variable case */}:
		${2}
		${3:break;}
##
## Loops
# for
snippet for
	for (${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
		${4}
	}
# for (custom)
snippet forr
	for (${1:i} = ${2:0}; ${3:$1 < 10}; $1${4:++}) {
		${5}
	}
# while
snippet wh
	while (${1:/* condition */}) {
		${2}
	}
# do... while
snippet do
	do {
		${2}
	} while (${1:/* condition */});
##
## Functions
# function definition
snippet fun
	${1:void} ${2:function_name}(${3})
	{
		${4}
	}
# function declaration
snippet fund
	${1:void} ${2:function_name}(${3});
##
## Types
# typedef
snippet td
	typedef ${1:int} ${2:MyCustomType};
# struct
snippet st
	struct ${1:`vim_snippets#Filename('$1_t', 'name')`} {
		${2:/* data */}
	}${3: /* optional variable list */};
# typedef struct
snippet tds
	typedef struct ${2:_$1 }{
		${3:/* data */}
	} ${1:`vim_snippets#Filename('$1_t', 'name')`};
# typedef enum
snippet tde
	typedef enum {
		${1:/* data */}
	} ${2:foo};
##
## Input/Output
# printf
snippet pr
	printf("${1:%s}\n"${2});
# fprintf (again, this isn't as nice as TextMate's version, but it works)
snippet fpr
	fprintf(${1:stderr}, "${2:%s}\n"${3});
# getopt
snippet getopt
	int choice;
	while (1)
	{
		static struct option long_options[] =
		{
			/* Use flags like so:
			{"verbose",	no_argument,	&verbose_flag, 'V'}*/
			/* Argument styles: no_argument, required_argument, optional_argument */
			{"version", no_argument,	0,	'v'},
			{"help",	no_argument,	0,	'h'},
			${1}
			{0,0,0,0}
		};

		int option_index = 0;

		/* Argument parameters:
			no_argument: " "
			required_argument: ":"
			optional_argument: "::" */

		choice = getopt_long( argc, argv, "vh",
					long_options, &option_index);

		if (choice == -1)
			break;

		switch( choice )
		{
			case 'v':
				${2}
				break;

			case 'h':
				${3}
				break;

			case '?':
				/* getopt_long will have already printed an error */
				break;

			default:
				/* Not sure how to get here... */
				return EXIT_FAILURE;
		}
	}

	/* Deal with non-option arguments here */
	if ( optind < argc )
	{
		while ( optind < argc )
		{
			${0}
		}
	}
##
## Miscellaneous
# This is kind of convenient
snippet .
	[${1}]
# GPL
snippet gpl
	/*
	 * This program is free software; you can redistribute it and/or modify
	 * it under the terms of the GNU General Public License as published by
	 * the Free Software Foundation; either version 2 of the License, or
	 * (at your option) any later version.
	 *
	 * This program is distributed in the hope that it will be useful,
	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	 * GNU General Public License for more details.
	 *
	 * You should have received a copy of the GNU General Public License
	 * along with this program; if not, see <http://www.gnu.org/licenses/>.
	 *
	 * Copyright (C) ${1:Author}, `strftime("%Y")`
	 */

	${0}

## self defined snippets
snippet basic
	#include <stdio.h>
	#include <stdlib.h>
	int
	main() {
		${0}
		return EXIT_SUCCESS;
	}

snippet socketsrv
	#include <stdio.h>
	#include <stdlib.h>
	#include <arpa/inet.h>
	#include <sys/socket.h>
	#include <string.h>

	#define BACKLOG 5
	#define BUFSIZE 1024

	int
	main(int argc, char* argv[]) {
		int srvsock;
		int clientsock;
		struct sockaddr_in srvaddr;
		struct sockaddr_in clientaddr;
		unsigned short srvport;
		int clientlen;

		srvport = atoi(argv[1]);

		if ((srvsock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)) < 0) {
			perror("socket() failed");
		}

		memset(&srvaddr, 0, sizeof(srvaddr));
		srvaddr.sin_family = AF_INET;
		srvaddr.sin_addr.s_addr = htonl(INADDR_ANY);
		srvaddr.sin_port = htons(srvport);

		if (bind(srvsock, (struct sockaddr *) &srvaddr, sizeof(srvaddr)) < 0) {
			perror("bind() failed");
		}

		if (listen(srvsock, BACKLOG) < 0) {
			perror("listen() failed");
		}

		for (;;) {
			clientlen = sizeof(clientaddr);

			if ((clientsock = accept(srvsock, (struct sockaddr *) &clientaddr, &clientlen)) < 0)
				perror("accept() failed");

			char buf[BUFSIZE];
			int recvsize;

			if ( (recvsize = recv(clientsock, buf, BUFSIZE, 0)) < 0) {
				perror("recv() failed");
			}

			while (recvsize > 0) {

				if (send(clientsock, buf, recvsize, 0) != recvsize) {
					perror("send() failed");
					exit(EXIT_FAILURE);
				}

				if ( (recvsize = recv(clientsock, buf, BUFSIZE, 0)) < 0) {
					perror("recv() failed");
				}

				printf("buf: %s\n", buf);
			}


			printf("Handling client %s\n", inet_ntoa(clientaddr.sin_addr));

		}
		${0}
		return EXIT_SUCCESS;
	}

snippet socketclient
	#include <stdio.h>
	#include <stdlib.h>
	#include <arpa/inet.h>
	#include <sys/socket.h>
	#include <netdb.h>
	#include <string.h>

	#define BACKLOG 5
	#define BUFSIZE 1024

	int hostname_to_ip(char *hostname , char *ip);

	int
	main(int argc, char* argv[]) {
		int sock;
		struct sockaddr_in srvaddr;
		unsigned short srvport;
		char srvip[100];
		char *sendcontent;
		char buf[BUFSIZE];
		unsigned int contentlen;
		int bytesrecv, totalbytesrecv;
		
		if ((argc < 3) || (argc > 4)) {
		   fprintf(stderr, "Usage: %s <Server IP|Hostname> <Echo Word> [<Echo Port>]\n",
		           argv[0]);
		   exit(EXIT_FAILURE);
		}
		
		hostname_to_ip(argv[1], srvip);
		sendcontent = argv[2];
		
		if (argc == 4)
		    srvport = atoi(argv[3]);
		else
		    srvport = 1234; 
		
		if ((sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)) < 0) {
			perror("socket() failed");
			exit(EXIT_FAILURE);
		}

		memset(&srvaddr, 0, sizeof(srvaddr));
		srvaddr.sin_family      = AF_INET;
		srvaddr.sin_addr.s_addr = inet_addr(srvip);
		srvaddr.sin_port        = htons(srvport);
		
		if (connect(sock, (struct sockaddr *) &srvaddr, sizeof(srvaddr)) < 0) {
		    perror("connect() failed");
			exit(EXIT_FAILURE);
		}
		
		contentlen = strlen(sendcontent);
		
		if (send(sock, sendcontent, contentlen, 0) != contentlen) {
		    perror("send() sent a different number of bytes than expected");
			exit(EXIT_FAILURE);
		}
		
		totalbytesrecv = 0;
		printf("Received: ");
		while (totalbytesrecv < contentlen) {
		    if ((bytesrecv = recv(sock, buf, BUFSIZE - 1, 0)) <= 0)
		        perror("recv() failed or connection closed prematurely");
		    totalbytesrecv += bytesrecv;
		    buf[bytesrecv] = '\0';
		    printf("%s", buf);
		}

		close(sock);
		${0}
		return EXIT_SUCCESS;
	}

	int hostname_to_ip(char *hostname , char *ip)
	{
	    int sockfd;
	    struct addrinfo hints, *servinfo, *p;
	    struct sockaddr_in *h;
	    int rv;
	
	    memset(&hints, 0, sizeof hints);
	    hints.ai_family = AF_UNSPEC;
	    hints.ai_socktype = SOCK_STREAM;
	
	    if ( (rv = getaddrinfo( hostname , "http" , &hints , &servinfo)) != 0) {
	        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
	        return 1;
	    }
	
	    for(p = servinfo; p != NULL; p = p->ai_next) {
	        h = (struct sockaddr_in *) p->ai_addr;
	        strcpy(ip , inet_ntoa( h->sin_addr ) );
	    }
	
	    freeaddrinfo(servinfo);
	    return 0;
	}
	
